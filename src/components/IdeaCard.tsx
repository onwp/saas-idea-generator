import React from "react";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { StarIcon, Download } from "lucide-react";

// Common badge color mappings - moved outside component to fix Fast Refresh
const marketSizeColors = {
  Small: "bg-blue-100 text-blue-800",
  Medium: "bg-purple-100 text-purple-800",
  Large: "bg-green-100 text-green-800",
};

const difficultyColors = {
  Easy: "bg-green-100 text-green-800",
  Medium: "bg-yellow-100 text-yellow-800",
  Hard: "bg-red-100 text-red-800",
};

interface IdeaCardProps {
  title?: string;
  description?: string;
  marketSize?: "Small" | "Medium" | "Large";
  difficulty?: "Easy" | "Medium" | "Hard";
  isFavorite?: boolean;
  source?: string;
  onToggleFavorite?: () => void;
  onExport?: () => void;
}

const IdeaCard = ({
  title = "AI-Powered Content Calendar",
  description = "A SaaS tool that uses AI to suggest optimal posting times and content ideas based on audience engagement patterns.",
  marketSize = "Medium",
  difficulty = "Medium",
  isFavorite = false,
  source,
  onToggleFavorite = () => {},
  onExport = () => {},
}: IdeaCardProps) => {
  // Clean up title and description by removing any remaining markdown-style markers
  const cleanTitle = title
    .replace(/\*\*([^*]+)\*\*/g, "$1")
    .replace(/^\d+\.\s*/, "")
    .replace(/^\.\s*/, "") // Remove leading dot and space
    .replace(/^Title:\s*/i, "") // Remove "Title:" prefix
    .replace(/^Name:\s*/i, "") // Remove "Name:" prefix
    .replace(/^Idea\s*\d*:?\s*/i, "") // Remove "Idea 1:" type prefixes
    .replace(/^\d+$/, "") // Remove titles that are just numbers
    .replace(/^\s*\d+\.\s*Title:?\s*/i, "") // Remove "1. Title:" format
    .replace(/Market|Difficulty|Small|Medium|Large|Easy|Hard/gi, (match) => {
      // If these words appear at the start of the title, they're likely metadata that got misplaced
      if (title.indexOf(match) < 20) return "";
      return match; // Otherwise keep them as they might be part of a legitimate title
    })
    .trim();

  // If after cleaning we have an empty or very short title, use a fallback
  const finalTitle =
    !cleanTitle || cleanTitle.length < 3
      ? `${source || "AI"} SaaS Idea`
      : cleanTitle;

  const cleanDescription = description
    .replace(/\*\*([^*]+)\*\*/g, "$1")
    .replace(/Description:\s*/i, "") // Remove "Description:" prefix
    .replace(/\.\.\.$/, "") // Remove trailing ellipsis
    .replace(/^\s*\d+\.\s*Title:?\s*.*$/im, "") // Remove any "1. Title:" lines
    .replace(/^\s*Title:?\s*.*$/im, "") // Remove any "Title:" lines
    .replace(/^\s*Market\s*Size:.*$/im, "") // Remove market size lines
    .replace(/^\s*Difficulty:.*$/im, "") // Remove difficulty lines
    .trim();

  // If after cleaning we have an empty or very short description, use a fallback
  const finalDescription =
    !cleanDescription || cleanDescription.length < 10
      ? `A SaaS idea generated by ${source || "AI"}.`
      : cleanDescription;

  return (
    <Card className="w-full max-w-sm h-full bg-white shadow-md hover:shadow-lg transition-shadow duration-300">
      <CardHeader className="pb-2">
        <div className="flex justify-between items-start">
          <CardTitle className="text-xl font-bold line-clamp-2">
            {finalTitle || "Untitled Idea"}
          </CardTitle>
          {source && (
            <Badge variant="outline" className="ml-2">
              {source}
            </Badge>
          )}
        </div>
        <div className="flex gap-2 mt-2">
          <Badge className={marketSizeColors[marketSize]}>
            Market: {marketSize}
          </Badge>
          <Badge className={difficultyColors[difficulty]}>
            Difficulty: {difficulty}
          </Badge>
        </div>
      </CardHeader>
      <CardContent>
        <CardDescription className="text-sm text-gray-600 min-h-[80px] line-clamp-4">
          {finalDescription || "No description available."}
        </CardDescription>
      </CardContent>
      <CardFooter className="flex justify-between pt-2 border-t">
        <Button
          variant="ghost"
          size="sm"
          onClick={onToggleFavorite}
          className={isFavorite ? "text-yellow-500" : "text-gray-400"}
        >
          <StarIcon className="h-5 w-5 mr-1" />
          {isFavorite ? "Saved" : "Save"}
        </Button>
        <Button variant="outline" size="sm" onClick={onExport}>
          <Download className="h-4 w-4 mr-1" />
          Export
        </Button>
      </CardFooter>
    </Card>
  );
};

// Export the component as default
export default IdeaCard;

// Export color mappings directly as named exports
// This pattern is more compatible with Fast Refresh
export { marketSizeColors, difficultyColors };
